/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -i qmnamespace.h -p qmserverproxy.h: interfaces/minputmethodserver1interface.xml
 *
 * qdbusxml2cpp is Copyright (C) 2016 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef QMSERVERPROXY_H
#define QMSERVERPROXY_H

#include "qmnamespace.h"

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.meego.inputmethod.uiserver1
 */
class ComMeegoInputmethodUiserver1Interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.meego.inputmethod.uiserver1"; }

public:
    ComMeegoInputmethodUiserver1Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComMeegoInputmethodUiserver1Interface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> activateContext()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("activateContext"), argumentList);
    }

    inline QDBusPendingReply<> appOrientationAboutToChange(int angle)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(angle);
        return asyncCallWithArgumentList(QStringLiteral("appOrientationAboutToChange"), argumentList);
    }

    inline QDBusPendingReply<> appOrientationChanged(int angle)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(angle);
        return asyncCallWithArgumentList(QStringLiteral("appOrientationChanged"), argumentList);
    }

    inline QDBusPendingReply<> hideInputMethod()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("hideInputMethod"), argumentList);
    }

    inline QDBusPendingReply<> mouseClickedOnPreedit(int posX, int posY, int preeditRectX, int preeditRectY, int preeditRectWidth, int preeditRectHeight)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(posX) << QVariant::fromValue(posY) << QVariant::fromValue(preeditRectX) << QVariant::fromValue(preeditRectY) << QVariant::fromValue(preeditRectWidth) << QVariant::fromValue(preeditRectHeight);
        return asyncCallWithArgumentList(QStringLiteral("mouseClickedOnPreedit"), argumentList);
    }

    inline QDBusPendingReply<> processKeyEvent(int keyType, int keyCode, int modifiers, const QString &text, bool autoRepeat, int count, uint nativeScanCode, uint nativeModifiers, uint time)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(keyType) << QVariant::fromValue(keyCode) << QVariant::fromValue(modifiers) << QVariant::fromValue(text) << QVariant::fromValue(autoRepeat) << QVariant::fromValue(count) << QVariant::fromValue(nativeScanCode) << QVariant::fromValue(nativeModifiers) << QVariant::fromValue(time);
        return asyncCallWithArgumentList(QStringLiteral("processKeyEvent"), argumentList);
    }

    inline QDBusPendingReply<> registerAttributeExtension(int id, const QString &fileName)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(fileName);
        return asyncCallWithArgumentList(QStringLiteral("registerAttributeExtension"), argumentList);
    }

    inline QDBusPendingReply<> reset()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("reset"), argumentList);
    }

    inline QDBusPendingReply<> setCopyPasteState(bool copyAvailable, bool pasteAvailable)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(copyAvailable) << QVariant::fromValue(pasteAvailable);
        return asyncCallWithArgumentList(QStringLiteral("setCopyPasteState"), argumentList);
    }

    inline QDBusPendingReply<> setExtendedAttribute(int id, const QString &target, const QString &targetItem, const QString &attribute, const QDBusVariant &value)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id) << QVariant::fromValue(target) << QVariant::fromValue(targetItem) << QVariant::fromValue(attribute) << QVariant::fromValue(value);
        return asyncCallWithArgumentList(QStringLiteral("setExtendedAttribute"), argumentList);
    }

    inline QDBusPendingReply<> setPreedit(const QString &text, int cursorPos)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(text) << QVariant::fromValue(cursorPos);
        return asyncCallWithArgumentList(QStringLiteral("setPreedit"), argumentList);
    }

    inline QDBusPendingReply<> showInputMethod()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("showInputMethod"), argumentList);
    }

    inline QDBusPendingReply<> unregisterAttributeExtension(int id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(id);
        return asyncCallWithArgumentList(QStringLiteral("unregisterAttributeExtension"), argumentList);
    }

    inline QDBusPendingReply<> updateWidgetInformation(const QVariantMap &stateInformation, bool focusChanged)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(stateInformation) << QVariant::fromValue(focusChanged);
        return asyncCallWithArgumentList(QStringLiteral("updateWidgetInformation"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void invokeAction(const QString &action, const QString &sequence);
};

namespace com {
  namespace meego {
    namespace inputmethod {
      typedef ::ComMeegoInputmethodUiserver1Interface uiserver1;
    }
  }
}
#endif
